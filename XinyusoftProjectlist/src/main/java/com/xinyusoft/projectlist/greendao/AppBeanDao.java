package com.xinyusoft.projectlist.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "APP_BEAN".
*/
public class AppBeanDao extends AbstractDao<AppBean, Long> {

    public static final String TABLENAME = "APP_BEAN";

    /**
     * Properties of entity AppBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AppName = new Property(1, String.class, "appName", false, "APP_NAME");
        public final static Property Author = new Property(2, String.class, "author", false, "AUTHOR");
        public final static Property LocalVersion = new Property(3, String.class, "localVersion", false, "LOCAL_VERSION");
        public final static Property FirstVersion = new Property(4, String.class, "firstVersion", false, "FIRST_VERSION");
        public final static Property NowVersion = new Property(5, String.class, "nowVersion", false, "NOW_VERSION");
    };


    public AppBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AppBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"APP_NAME\" TEXT NOT NULL ," + // 1: appName
                "\"AUTHOR\" TEXT," + // 2: author
                "\"LOCAL_VERSION\" TEXT," + // 3: localVersion
                "\"FIRST_VERSION\" TEXT," + // 4: firstVersion
                "\"NOW_VERSION\" TEXT);"); // 5: nowVersion
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP_BEAN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AppBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getAppName());
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(3, author);
        }
 
        String localVersion = entity.getLocalVersion();
        if (localVersion != null) {
            stmt.bindString(4, localVersion);
        }
 
        String firstVersion = entity.getFirstVersion();
        if (firstVersion != null) {
            stmt.bindString(5, firstVersion);
        }
 
        String nowVersion = entity.getNowVersion();
        if (nowVersion != null) {
            stmt.bindString(6, nowVersion);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AppBean readEntity(Cursor cursor, int offset) {
        AppBean entity = new AppBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // appName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // author
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // localVersion
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // firstVersion
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // nowVersion
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AppBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAppName(cursor.getString(offset + 1));
        entity.setAuthor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLocalVersion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFirstVersion(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNowVersion(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AppBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AppBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
